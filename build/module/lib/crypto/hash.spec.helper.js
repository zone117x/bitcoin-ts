// tslint:disable:no-expression-statement no-unsafe-any
import test from 'ava';
import * as bcrypto from 'bcrypto';
import { createHash } from 'crypto';
import * as fc from 'fast-check';
import { readFileSync } from 'fs';
import * as hashJs from 'hash.js';
import { join } from 'path';
const testLength = 10000;
const stringToCharsUint8Array = (str) => new Uint8Array([...str].map(c => c.charCodeAt(0)));
const maxUint8Number = 255;
const fcUint8Array = (minLength, maxLength) => fc
    .array(fc.integer(0, maxUint8Number), minLength, maxLength)
    .map(a => Uint8Array.from(a));
export const testHashFunction = (hashFunctionName, getEmbeddedBinary, instantiate, instantiateBytes, abcHash, testHash, bitcoinTsHash, nodeJsAlgorithm) => {
    const binary = getEmbeddedBinary();
    const bcryptoAlgorithm = nodeJsAlgorithm.toUpperCase();
    test(`${hashFunctionName} getEmbeddedBinary returns the proper binary`, t => {
        const path = join(__dirname, '..', 'bin', `${hashFunctionName}`, `${hashFunctionName}.wasm`);
        const binaryFromDisk = readFileSync(path).buffer;
        t.deepEqual(binary, binaryFromDisk);
    });
    test(`${hashFunctionName} instantiated with embedded binary`, async (t) => {
        const hashFunction = await instantiate();
        t.deepEqual(hashFunction.hash(stringToCharsUint8Array('abc')), abcHash);
        t.deepEqual(hashFunction.hash(stringToCharsUint8Array('test')), testHash);
        t.deepEqual(hashFunction.hash(stringToCharsUint8Array('bitcoin-ts')), bitcoinTsHash);
    });
    test(`${hashFunctionName} instantiated with bytes`, async (t) => {
        const hashFunction = await instantiateBytes(binary);
        const equivalentToNative = fc.property(fcUint8Array(0, testLength), message => {
            const hash = createHash(nodeJsAlgorithm);
            t.deepEqual(new Uint8Array(hash.update(Buffer.from(message)).digest()), hashFunction.hash(message));
        });
        t.notThrows(() => {
            fc.assert(equivalentToNative);
        });
        const equivalentToBcoin = fc.property(fcUint8Array(0, testLength), message => {
            t.deepEqual(new Uint8Array(bcrypto[bcryptoAlgorithm].digest(Buffer.from(message))), hashFunction.hash(message));
        });
        t.notThrows(() => {
            fc.assert(equivalentToBcoin);
        });
        const equivalentToHashJs = fc.property(fcUint8Array(0, testLength), message => {
            t.deepEqual(new Uint8Array(hashJs[nodeJsAlgorithm]()
                .update(message)
                .digest()), hashFunction.hash(message));
        });
        t.notThrows(() => {
            fc.assert(equivalentToHashJs);
        });
    });
    test(`${hashFunctionName} incremental hashing`, async (t) => {
        const hashFunction = await instantiate();
        t.deepEqual(hashFunction.final(hashFunction.update(hashFunction.update(hashFunction.update(hashFunction.init(), stringToCharsUint8Array('a')), stringToCharsUint8Array('b')), stringToCharsUint8Array('c'))), abcHash);
        t.deepEqual(hashFunction.final(hashFunction.update(hashFunction.init(), stringToCharsUint8Array('test'))), testHash);
        t.deepEqual(hashFunction.final(hashFunction.update(hashFunction.update(hashFunction.init(), stringToCharsUint8Array('bitcoin')), stringToCharsUint8Array('-ts'))), bitcoinTsHash);
        const equivalentToSinglePass = fc.property(fcUint8Array(1, testLength), fc.integer(1, testLength), (message, chunkSize) => {
            const chunkCount = Math.ceil(message.length / chunkSize);
            const chunks = Array.from({ length: chunkCount })
                .map((_, index) => index * chunkSize)
                // tslint:disable-next-line:restrict-plus-operands
                .map(startIndex => message.slice(startIndex, startIndex + chunkSize));
            const incrementalResult = hashFunction.final(chunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
            const singlePassResult = hashFunction.hash(message);
            t.deepEqual(incrementalResult, singlePassResult);
        });
        t.notThrows(() => {
            fc.assert(equivalentToSinglePass);
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5zcGVjLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY3J5cHRvL2hhc2guc3BlYy5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDbEMsT0FBTyxLQUFLLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFDbEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUc1QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFFekIsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQzlDLElBQUksVUFBVSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVyRCxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUM7QUFDM0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFpQixFQUFFLFNBQWlCLEVBQUUsRUFBRSxDQUM1RCxFQUFFO0tBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7S0FDMUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQzlC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