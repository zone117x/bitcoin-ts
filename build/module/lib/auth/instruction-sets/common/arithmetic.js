/* istanbul ignore file */ // TODO: stabilize & test
import { pushToStack, useTwoScriptNumbers } from './combinators';
import { applyError, CommonAuthenticationError } from './common';
import { CommonOpcodes } from './opcodes';
import { bigIntToScriptNumber, booleanToScriptNumber, parseBytesAsScriptNumber } from './types';
export const opNot = () => (state) => {
    const element = state.stack.pop();
    // tslint:disable-next-line:no-if-statement
    if (!element) {
        return applyError(CommonAuthenticationError.emptyStack, state);
    }
    const value = parseBytesAsScriptNumber(element);
    // tslint:disable-next-line:no-expression-statement
    state.stack.push(value === BigInt(0)
        ? bigIntToScriptNumber(BigInt(1))
        : bigIntToScriptNumber(BigInt(0)));
    return state;
};
export const opAdd = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => 
// tslint:disable-next-line: restrict-plus-operands
pushToStack(nextState, bigIntToScriptNumber(firstValue + secondValue)));
export const opSub = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, bigIntToScriptNumber(firstValue - secondValue)));
export const opBoolAnd = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== BigInt(0) && secondValue !== BigInt(0))));
export const opBoolOr = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== BigInt(0) || secondValue !== BigInt(0))));
export const opNumEqual = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue === secondValue)));
export const opNumNotEqual = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== secondValue)));
export const opLessThan = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue < secondValue)));
export const opLessThanOrEqual = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue <= secondValue)));
export const opGreaterThan = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue > secondValue)));
export const opGreaterThanOrEqual = () => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue >= secondValue)));
export const arithmeticOperations = () => ({
    [CommonOpcodes.OP_NOT]: opNot(),
    [CommonOpcodes.OP_ADD]: opAdd(),
    [CommonOpcodes.OP_SUB]: opSub(),
    [CommonOpcodes.OP_BOOLAND]: opBoolAnd(),
    [CommonOpcodes.OP_BOOLOR]: opBoolOr(),
    [CommonOpcodes.OP_NUMEQUAL]: opNumEqual(),
    [CommonOpcodes.OP_NUMNOTEQUAL]: opNumNotEqual(),
    [CommonOpcodes.OP_LESSTHAN]: opLessThan(),
    [CommonOpcodes.OP_LESSTHANOREQUAL]: opLessThanOrEqual(),
    [CommonOpcodes.OP_GREATERTHAN]: opGreaterThan(),
    [CommonOpcodes.OP_GREATERTHANOREQUAL]: opGreaterThanOrEqual()
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpdGhtZXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi9hcml0aG1ldGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixDQUFDLHlCQUF5QjtBQUdwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUseUJBQXlCLEVBQWMsTUFBTSxVQUFVLENBQUM7QUFDN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUNyQix3QkFBd0IsRUFDekIsTUFBTSxTQUFTLENBQUM7QUFFakIsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLEdBR2pCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQ3RCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEMsMkNBQTJDO0lBQzNDLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLFVBQVUsQ0FDZix5QkFBeUIsQ0FBQyxVQUFVLEVBQ3BDLEtBQUssQ0FDTixDQUFDO0tBQ0g7SUFDRCxNQUFNLEtBQUssR0FBRyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRCxtREFBbUQ7SUFDbkQsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2QsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BDLENBQUM7SUFDRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FB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