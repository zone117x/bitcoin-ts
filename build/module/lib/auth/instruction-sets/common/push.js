/* istanbul ignore file */ // TODO: stabilize & test
import { range } from '../../../utils/hex';
import { Bytes, numberToLittleEndianBin } from '../instruction-sets';
import { CommonOpcodes } from './opcodes';
import { bigIntToScriptNumber } from './types';
export var PushOperationConstants;
(function (PushOperationConstants) {
    /**
     * OP_PUSHBYTES_75
     */
    PushOperationConstants[PushOperationConstants["maximumPushByteOperationSize"] = 75] = "maximumPushByteOperationSize";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_1"] = 76] = "OP_PUSHDATA_1";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_2"] = 77] = "OP_PUSHDATA_2";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_4"] = 78] = "OP_PUSHDATA_4";
    /**
     * OP_PUSHDATA_4
     */
    PushOperationConstants[PushOperationConstants["highestPushDataOpcode"] = 78] = "highestPushDataOpcode";
    /**
     * For OP_1 to OP_16, `opcode` is the number offset by `0x50` (80):
     *
     * `OP_N = 0x50 + N`
     *
     * OP_0 is really OP_PUSHBYTES_0 (`0x00`), so it does not follow this pattern.
     */
    PushOperationConstants[PushOperationConstants["pushNumberOpcodesOffset"] = 80] = "pushNumberOpcodesOffset";
    /** OP_1 through OP_16 */
    PushOperationConstants[PushOperationConstants["pushNumberOpcodes"] = 16] = "pushNumberOpcodes";
    /**
     * 256 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData1Size"] = 255] = "maximumPushData1Size";
    /**
     * Standard consensus parameter for most Bitcoin forks.
     */
    PushOperationConstants[PushOperationConstants["maximumPushSize"] = 520] = "maximumPushSize";
    /**
     * 256 ** 2 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData2Size"] = 65536] = "maximumPushData2Size";
    /**
     * 256 ** 4 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData4Size"] = 4294967295] = "maximumPushData4Size";
})(PushOperationConstants || (PushOperationConstants = {}));
/**
 * Prefix a `Uint8Array` with the proper opcode and push length bytes (if
 * necessary) to create a push instruction for `data`.
 *
 * Note, the maximum `bytecode` length which can be encoded for a push in the
 * Bitcoin system is `4294967295` (~4GB). This method assumes a smaller input â€“ if
 * `bytecode` has the potential to be longer, it should be checked (and the
 * error handled) prior to calling this method.
 *
 * @param data the Uint8Array to push to the stack
 */
// tslint:disable-next-line:cyclomatic-complexity
export const prefixDataPush = (data) => data.length <= PushOperationConstants.maximumPushByteOperationSize
    ? data.length === 1 && data[0] <= PushOperationConstants.pushNumberOpcodes
        ? Uint8Array.of(data[0] + PushOperationConstants.pushNumberOpcodesOffset)
        : Uint8Array.from([data.length, ...data])
    : data.length <= PushOperationConstants.maximumPushData1Size
        ? Uint8Array.from([
            PushOperationConstants.OP_PUSHDATA_1,
            ...numberToLittleEndianBin(data.length, Bytes.Uint8),
            ...data
        ])
        : data.length <= PushOperationConstants.maximumPushData2Size
            ? Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_2,
                ...numberToLittleEndianBin(data.length, Bytes.Uint16),
                ...data
            ])
            : Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_4,
                ...numberToLittleEndianBin(data.length, Bytes.Uint32),
                ...data
            ]);
export const pushByteOpcodes = [
    CommonOpcodes.OP_PUSHBYTES_1,
    CommonOpcodes.OP_PUSHBYTES_2,
    CommonOpcodes.OP_PUSHBYTES_3,
    CommonOpcodes.OP_PUSHBYTES_4,
    CommonOpcodes.OP_PUSHBYTES_5,
    CommonOpcodes.OP_PUSHBYTES_6,
    CommonOpcodes.OP_PUSHBYTES_7,
    CommonOpcodes.OP_PUSHBYTES_8,
    CommonOpcodes.OP_PUSHBYTES_9,
    CommonOpcodes.OP_PUSHBYTES_10,
    CommonOpcodes.OP_PUSHBYTES_11,
    CommonOpcodes.OP_PUSHBYTES_12,
    CommonOpcodes.OP_PUSHBYTES_13,
    CommonOpcodes.OP_PUSHBYTES_14,
    CommonOpcodes.OP_PUSHBYTES_15,
    CommonOpcodes.OP_PUSHBYTES_16,
    CommonOpcodes.OP_PUSHBYTES_17,
    CommonOpcodes.OP_PUSHBYTES_18,
    CommonOpcodes.OP_PUSHBYTES_19,
    CommonOpcodes.OP_PUSHBYTES_20,
    CommonOpcodes.OP_PUSHBYTES_21,
    CommonOpcodes.OP_PUSHBYTES_22,
    CommonOpcodes.OP_PUSHBYTES_23,
    CommonOpcodes.OP_PUSHBYTES_24,
    CommonOpcodes.OP_PUSHBYTES_25,
    CommonOpcodes.OP_PUSHBYTES_26,
    CommonOpcodes.OP_PUSHBYTES_27,
    CommonOpcodes.OP_PUSHBYTES_28,
    CommonOpcodes.OP_PUSHBYTES_29,
    CommonOpcodes.OP_PUSHBYTES_30,
    CommonOpcodes.OP_PUSHBYTES_31,
    CommonOpcodes.OP_PUSHBYTES_32,
    CommonOpcodes.OP_PUSHBYTES_33,
    CommonOpcodes.OP_PUSHBYTES_34,
    CommonOpcodes.OP_PUSHBYTES_35,
    CommonOpcodes.OP_PUSHBYTES_36,
    CommonOpcodes.OP_PUSHBYTES_37,
    CommonOpcodes.OP_PUSHBYTES_38,
    CommonOpcodes.OP_PUSHBYTES_39,
    CommonOpcodes.OP_PUSHBYTES_40,
    CommonOpcodes.OP_PUSHBYTES_41,
    CommonOpcodes.OP_PUSHBYTES_42,
    CommonOpcodes.OP_PUSHBYTES_43,
    CommonOpcodes.OP_PUSHBYTES_44,
    CommonOpcodes.OP_PUSHBYTES_45,
    CommonOpcodes.OP_PUSHBYTES_46,
    CommonOpcodes.OP_PUSHBYTES_47,
    CommonOpcodes.OP_PUSHBYTES_48,
    CommonOpcodes.OP_PUSHBYTES_49,
    CommonOpcodes.OP_PUSHBYTES_50,
    CommonOpcodes.OP_PUSHBYTES_51,
    CommonOpcodes.OP_PUSHBYTES_52,
    CommonOpcodes.OP_PUSHBYTES_53,
    CommonOpcodes.OP_PUSHBYTES_54,
    CommonOpcodes.OP_PUSHBYTES_55,
    CommonOpcodes.OP_PUSHBYTES_56,
    CommonOpcodes.OP_PUSHBYTES_57,
    CommonOpcodes.OP_PUSHBYTES_58,
    CommonOpcodes.OP_PUSHBYTES_59,
    CommonOpcodes.OP_PUSHBYTES_60,
    CommonOpcodes.OP_PUSHBYTES_61,
    CommonOpcodes.OP_PUSHBYTES_62,
    CommonOpcodes.OP_PUSHBYTES_63,
    CommonOpcodes.OP_PUSHBYTES_64,
    CommonOpcodes.OP_PUSHBYTES_65,
    CommonOpcodes.OP_PUSHBYTES_66,
    CommonOpcodes.OP_PUSHBYTES_67,
    CommonOpcodes.OP_PUSHBYTES_68,
    CommonOpcodes.OP_PUSHBYTES_69,
    CommonOpcodes.OP_PUSHBYTES_70,
    CommonOpcodes.OP_PUSHBYTES_71,
    CommonOpcodes.OP_PUSHBYTES_72,
    CommonOpcodes.OP_PUSHBYTES_73,
    CommonOpcodes.OP_PUSHBYTES_74,
    CommonOpcodes.OP_PUSHBYTES_75
];
export const pushOperation = () => (state) => {
    const instruction = state.instructions[state.ip];
    // tslint:disable-next-line:no-expression-statement
    state.stack.push(instruction.data);
    return state;
};
export const pushOperations = () => {
    const push = pushOperation();
    return range(PushOperationConstants.highestPushDataOpcode + 1).reduce((group, i) => ({ ...group, [i]: push }), {});
};
export const pushNumberOpcodes = [
    CommonOpcodes.OP_1NEGATE,
    CommonOpcodes.OP_1,
    CommonOpcodes.OP_2,
    CommonOpcodes.OP_3,
    CommonOpcodes.OP_4,
    CommonOpcodes.OP_5,
    CommonOpcodes.OP_6,
    CommonOpcodes.OP_7,
    CommonOpcodes.OP_8,
    CommonOpcodes.OP_9,
    CommonOpcodes.OP_10,
    CommonOpcodes.OP_11,
    CommonOpcodes.OP_12,
    CommonOpcodes.OP_13,
    CommonOpcodes.OP_14,
    CommonOpcodes.OP_15,
    CommonOpcodes.OP_16
];
export const pushNumberOperations = () => pushNumberOpcodes
    .map((opcode, i) => [
    opcode,
    [-1, ...range(PushOperationConstants.pushNumberOpcodes, 1)]
        .map(BigInt)
        .map(bigIntToScriptNumber)[i]
])
    .reduce((group, pair) => ({
    ...group,
    [pair[0]]: (state) => {
        // tslint:disable-next-line:no-expression-statement
        state.stack.push(pair[1].slice());
        return state;
    }
}), {});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi9wdXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixDQUFDLHlCQUF5QjtBQUVwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHM0MsT0FBTyxFQUVMLEtBQUssRUFDTCx1QkFBdUIsRUFDeEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUvQyxNQUFNLENBQU4sSUFBWSxzQkFzQ1g7QUF0Q0QsV0FBWSxzQkFBc0I7SUFDaEM7O09BRUc7SUFDSCxvSEFBbUMsQ0FBQTtJQUNuQyxzRkFBb0IsQ0FBQTtJQUNwQixzRkFBb0IsQ0FBQTtJQUNwQixzRkFBb0IsQ0FBQTtJQUNwQjs7T0FFRztJQUNILHNHQUFxQyxDQUFBO0lBQ3JDOzs7Ozs7T0FNRztJQUNILDBHQUE4QixDQUFBO0lBQzlCLHlCQUF5QjtJQUN6Qiw4RkFBc0IsQ0FBQTtJQUN0Qjs7T0FFRztJQUNILHFHQUEwQixDQUFBO0lBQzFCOztPQUVHO0lBQ0gsMkZBQXFCLENBQUE7SUFDckI7O09BRUc7SUFDSCx1R0FBNEIsQ0FBQTtJQUM1Qjs7T0FFRztJQUNILDRHQUFpQyxDQUFBO0FBQ25DLENBQUMsRUF0Q1csc0JBQXNCLEtBQXRCLHNCQUFzQixRQXNDakM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsaURBQWlEO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUNqRCxJQUFJLENBQUMsTUFBTSxJQUFJLHNCQUFzQixDQUFDLDRCQUE0QjtJQUNoRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLGlCQUFpQjtRQUN4RSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsc0JBQXNCLENBQUMsdUJBQXVCLENBQUM7UUFDekUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksc0JBQXNCLENBQUMsb0JBQW9CO1FBQzVELENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ2Qsc0JBQXNCLENBQUMsYUFBYTtZQUNwQyxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNwRCxHQUFHLElBQUk7U0FDUixDQUFDO1FBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksc0JBQXNCLENBQUMsb0JBQW9CO1lBQzVELENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNkLHNCQUFzQixDQUFDLGFBQWE7Z0JBQ3BDLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDO2dCQUNyRCxHQUFHLElBQUk7YUFDUixDQUFDO1lBQ0osQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Z0JBQ2Qsc0JBQXNCLENBQUMsYUFBYTtnQkFDcEMsR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQ3JELEdBQUcsSUFBSTthQUNSLENBQUMsQ0FBQztBQUVULE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBaUM7SUFDM0QsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGNBQWM7SUFDNUIsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7SUFDN0IsYUFBYSxDQUFDLGVBQWU7Q0FDOUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUdBLEVBQUUsQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtJQUN0RCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUNwQyxLQUFLLENBQUMsRUFBRSxDQUNpQyxDQUFDO0lBQzVDLG1EQUFtRDtJQUNuRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FHMUIsRUFBRTtJQUNKLE1BQU0sSUFBSSxHQUFHLGFBQWEsRUFBeUIsQ0FBQztJQUNwRCxPQUFPLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBRWxFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBaUM7SUFDN0QsYUFBYSxDQUFDLFVBQVU7SUFDeEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLElBQUk7SUFDbEIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7SUFDbkIsYUFBYSxDQUFDLEtBQUs7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBR2hDLEVBQUUsQ0FDSixpQkFBaUI7S0FDZCxHQUFHLENBQThCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDL0MsTUFBTTtJQUNOLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDeEQsR0FBRyxDQUFDLE1BQU0sQ0FBQztTQUNYLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNoQyxDQUFDO0tBQ0QsTUFBTSxDQUdMLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoQixHQUFHLEtBQUs7SUFDUixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBbUIsRUFBRSxFQUFFO1FBQ2pDLG1EQUFtRDtRQUNuRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNsQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFDLEVBQ0YsRUFBRSxDQUNILENBQUMifQ==