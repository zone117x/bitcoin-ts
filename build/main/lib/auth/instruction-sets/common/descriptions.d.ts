export declare enum CommonOpcodeDescriptions {
    OP_0 = "Push the Script Number 0 onto the stack.",
    OP_PUSHBYTES_1 = "Push the next byte onto the stack.",
    OP_PUSHBYTES_2 = "Push the next 2 bytes onto the stack.",
    OP_PUSHBYTES_3 = "Push the next 3 bytes onto the stack.",
    OP_PUSHBYTES_4 = "Push the next 4 bytes onto the stack.",
    OP_PUSHBYTES_5 = "Push the next 5 bytes onto the stack.",
    OP_PUSHBYTES_6 = "Push the next 6 bytes onto the stack.",
    OP_PUSHBYTES_7 = "Push the next 7 bytes onto the stack.",
    OP_PUSHBYTES_8 = "Push the next 8 bytes onto the stack.",
    OP_PUSHBYTES_9 = "Push the next 9 bytes onto the stack.",
    OP_PUSHBYTES_10 = "Push the next 10 bytes onto the stack.",
    OP_PUSHBYTES_11 = "Push the next 11 bytes onto the stack.",
    OP_PUSHBYTES_12 = "Push the next 12 bytes onto the stack.",
    OP_PUSHBYTES_13 = "Push the next 13 bytes onto the stack.",
    OP_PUSHBYTES_14 = "Push the next 14 bytes onto the stack.",
    OP_PUSHBYTES_15 = "Push the next 15 bytes onto the stack.",
    OP_PUSHBYTES_16 = "Push the next 16 bytes onto the stack.",
    OP_PUSHBYTES_17 = "Push the next 17 bytes onto the stack.",
    OP_PUSHBYTES_18 = "Push the next 18 bytes onto the stack.",
    OP_PUSHBYTES_19 = "Push the next 19 bytes onto the stack.",
    OP_PUSHBYTES_20 = "Push the next 20 bytes onto the stack.",
    OP_PUSHBYTES_21 = "Push the next 21 bytes onto the stack.",
    OP_PUSHBYTES_22 = "Push the next 22 bytes onto the stack.",
    OP_PUSHBYTES_23 = "Push the next 23 bytes onto the stack.",
    OP_PUSHBYTES_24 = "Push the next 24 bytes onto the stack.",
    OP_PUSHBYTES_25 = "Push the next 25 bytes onto the stack.",
    OP_PUSHBYTES_26 = "Push the next 26 bytes onto the stack.",
    OP_PUSHBYTES_27 = "Push the next 27 bytes onto the stack.",
    OP_PUSHBYTES_28 = "Push the next 28 bytes onto the stack.",
    OP_PUSHBYTES_29 = "Push the next 29 bytes onto the stack.",
    OP_PUSHBYTES_30 = "Push the next 30 bytes onto the stack.",
    OP_PUSHBYTES_31 = "Push the next 31 bytes onto the stack.",
    OP_PUSHBYTES_32 = "Push the next 32 bytes onto the stack.",
    OP_PUSHBYTES_33 = "Push the next 33 bytes onto the stack.",
    OP_PUSHBYTES_34 = "Push the next 34 bytes onto the stack.",
    OP_PUSHBYTES_35 = "Push the next 35 bytes onto the stack.",
    OP_PUSHBYTES_36 = "Push the next 36 bytes onto the stack.",
    OP_PUSHBYTES_37 = "Push the next 37 bytes onto the stack.",
    OP_PUSHBYTES_38 = "Push the next 38 bytes onto the stack.",
    OP_PUSHBYTES_39 = "Push the next 39 bytes onto the stack.",
    OP_PUSHBYTES_40 = "Push the next 40 bytes onto the stack.",
    OP_PUSHBYTES_41 = "Push the next 41 bytes onto the stack.",
    OP_PUSHBYTES_42 = "Push the next 42 bytes onto the stack.",
    OP_PUSHBYTES_43 = "Push the next 43 bytes onto the stack.",
    OP_PUSHBYTES_44 = "Push the next 44 bytes onto the stack.",
    OP_PUSHBYTES_45 = "Push the next 45 bytes onto the stack.",
    OP_PUSHBYTES_46 = "Push the next 46 bytes onto the stack.",
    OP_PUSHBYTES_47 = "Push the next 47 bytes onto the stack.",
    OP_PUSHBYTES_48 = "Push the next 48 bytes onto the stack.",
    OP_PUSHBYTES_49 = "Push the next 49 bytes onto the stack.",
    OP_PUSHBYTES_50 = "Push the next 50 bytes onto the stack.",
    OP_PUSHBYTES_51 = "Push the next 51 bytes onto the stack.",
    OP_PUSHBYTES_52 = "Push the next 52 bytes onto the stack.",
    OP_PUSHBYTES_53 = "Push the next 53 bytes onto the stack.",
    OP_PUSHBYTES_54 = "Push the next 54 bytes onto the stack.",
    OP_PUSHBYTES_55 = "Push the next 55 bytes onto the stack.",
    OP_PUSHBYTES_56 = "Push the next 56 bytes onto the stack.",
    OP_PUSHBYTES_57 = "Push the next 57 bytes onto the stack.",
    OP_PUSHBYTES_58 = "Push the next 58 bytes onto the stack.",
    OP_PUSHBYTES_59 = "Push the next 59 bytes onto the stack.",
    OP_PUSHBYTES_60 = "Push the next 60 bytes onto the stack.",
    OP_PUSHBYTES_61 = "Push the next 61 bytes onto the stack.",
    OP_PUSHBYTES_62 = "Push the next 62 bytes onto the stack.",
    OP_PUSHBYTES_63 = "Push the next 63 bytes onto the stack.",
    OP_PUSHBYTES_64 = "Push the next 64 bytes onto the stack.",
    OP_PUSHBYTES_65 = "Push the next 65 bytes onto the stack.",
    OP_PUSHBYTES_66 = "Push the next 66 bytes onto the stack.",
    OP_PUSHBYTES_67 = "Push the next 67 bytes onto the stack.",
    OP_PUSHBYTES_68 = "Push the next 68 bytes onto the stack.",
    OP_PUSHBYTES_69 = "Push the next 69 bytes onto the stack.",
    OP_PUSHBYTES_70 = "Push the next 70 bytes onto the stack.",
    OP_PUSHBYTES_71 = "Push the next 71 bytes onto the stack.",
    OP_PUSHBYTES_72 = "Push the next 72 bytes onto the stack.",
    OP_PUSHBYTES_73 = "Push the next 73 bytes onto the stack.",
    OP_PUSHBYTES_74 = "Push the next 74 bytes onto the stack.",
    OP_PUSHBYTES_75 = "Push the next 75 bytes onto the stack.",
    OP_PUSHDATA_1 = "Read the next Uint8 and push that number of bytes onto the stack.",
    OP_PUSHDATA_2 = "Read the next little-endian Uint16 and push that number of bytes onto the stack.",
    OP_PUSHDATA_4 = "Read the next little-endian Uint32 and push that number of bytes onto the stack.",
    OP_1NEGATE = "Push the Script Number -1 onto the stack.",
    OP_RESERVED = 80,
    OP_1 = "Push the Script Number 1 onto the stack.",
    OP_2 = "Push the Script Number 2 onto the stack.",
    OP_3 = "Push the Script Number 3 onto the stack.",
    OP_4 = "Push the Script Number 4 onto the stack.",
    OP_5 = "Push the Script Number 5 onto the stack.",
    OP_6 = "Push the Script Number 6 onto the stack.",
    OP_7 = "Push the Script Number 7 onto the stack.",
    OP_8 = "Push the Script Number 8 onto the stack.",
    OP_9 = "Push the Script Number 9 onto the stack.",
    OP_10 = "Push the Script Number 10 onto the stack.",
    OP_11 = "Push the Script Number 11 onto the stack.",
    OP_12 = "Push the Script Number 12 onto the stack.",
    OP_13 = "Push the Script Number 13 onto the stack.",
    OP_14 = "Push the Script Number 14 onto the stack.",
    OP_15 = "Push the Script Number 15 onto the stack.",
    OP_16 = "Push the Script Number 16 onto the stack.",
    OP_NOP = 97,
    OP_VER = 98,
    OP_IF = 99,
    OP_NOTIF = 100,
    OP_VERIF = 101,
    OP_VERNOTIF = 102,
    OP_ELSE = 103,
    OP_ENDIF = 104,
    OP_VERIFY = "Pop the top element from the stack and error if it isn't \"truthy\".",
    OP_RETURN = 106,
    OP_TOALTSTACK = 107,
    OP_FROMALTSTACK = 108,
    OP_2DROP = 109,
    OP_2DUP = 110,
    OP_3DUP = 111,
    OP_2OVER = 112,
    OP_2ROT = 113,
    OP_2SWAP = 114,
    OP_IFDUP = 115,
    OP_DEPTH = 116,
    OP_DROP = "Pop the top element from the stack and discard it.",
    OP_DUP = "Duplicate the top element on the stack.",
    OP_NIP = 119,
    OP_OVER = 120,
    OP_PICK = 121,
    OP_ROLL = 122,
    OP_ROT = 123,
    OP_SWAP = 124,
    OP_TUCK = 125,
    OP_SIZE = 130,
    OP_EQUAL = "Pop the top two elements off the stack and compare them byte-by-byte. If they are the same, push a Script Number 1, otherwise push a Script Number 0.",
    OP_EQUALVERIFY = "Pop the top two elements off the stack and compare them byte-by-byte. If they are the different, error. (This operation is a combination of OP_EQUAL followed by OP_VERIFY.)",
    OP_RESERVED1 = 137,
    OP_RESERVED2 = 138,
    OP_1ADD = 139,
    OP_1SUB = 140,
    OP_NEGATE = 143,
    OP_ABS = 144,
    OP_NOT = "Pop the top element off the stack as a Script Number. If its value is 0, push a Script Number 1, otherwise, push a Script Number 0.",
    OP_0NOTEQUAL = 146,
    OP_ADD = "Pop the top two elements off the stack as Script Numbers. Add them, then push the result.",
    OP_SUB = "Pop the top two elements off the stack as Script Numbers. Subtract the top item from the second item, then push the result.",
    OP_BOOLAND = "Pop the top two elements off the stack as Script Numbers. If neither value is a Script Number 0, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_BOOLOR = "Pop the top two elements off the stack as Script Numbers. If either value is a Script Number 1, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_NUMEQUAL = "Pop the top two elements off the stack as Script Numbers. If the values are equal, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_NUMEQUALVERIFY = "Pop the top two elements off the stack as Script Numbers. If the values are different, error.",
    OP_NUMNOTEQUAL = "Pop the top two elements off the stack as Script Numbers. If the values are not equal, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_LESSTHAN = "Pop the top two elements off the stack as Script Numbers. If the second item is less than top item, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_GREATERTHAN = "Pop the top two elements off the stack as Script Numbers. If the second item is greater than top item, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_LESSTHANOREQUAL = "Pop the top two elements off the stack as Script Numbers. If the second item is less than or equal to the top item, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_GREATERTHANOREQUAL = "Pop the top two elements off the stack as Script Numbers. If the second item is greater than or equal to the top item, push a Script Number 1. Otherwise, push a Script Number 0.",
    OP_MIN = 163,
    OP_MAX = 164,
    OP_WITHIN = 165,
    OP_RIPEMD160 = 166,
    OP_SHA1 = 167,
    OP_SHA256 = 168,
    OP_HASH160 = "Pop the top element off the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.",
    OP_HASH256 = 170,
    OP_CODESEPARATOR = 171,
    OP_CHECKSIG = "Pop the top two elements off the stack. Treat the first as a public key and the second as a signature. If the signature is valid, push a Script Number 1, otherwise push a Script Number 0.",
    OP_CHECKSIGVERIFY = "Pop the top two elements off the stack. Treat the first as a public key and the second as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKSIG followed by OP_VERIFY.)",
    OP_CHECKMULTISIG = "Pop elements off the stack: first pop the Script Number of public keys, then pop each of those public keys. Next, pop the Script Number of required signatures, then pop each of those signatures. Finally, pop a final Script Number which must be 0 due to a protocol bug. Checking each signature against each public key in order, if all signatures are valid \u2013 and the required number of signatures have been provided \u2013 push a Script Number 1, otherwise push a Script Number 0.",
    OP_CHECKMULTISIGVERIFY = "Pop elements off the stack: first pop the Script Number of public keys, then pop each of those public keys. Next, pop the Script Number of required signatures, then pop each of those signatures. Finally, pop a final Script Number which must be 0 due to a protocol bug. Checking each signature against each public key in order, if any signatures are invalid \u2013 or the required number of signatures have not been provided \u2013 error. (This operation is a combination of OP_CHECKMULTISIG followed by OP_VERIFY.)",
    OP_NOP1 = 176,
    OP_CHECKLOCKTIMEVERIFY = 177,
    OP_CHECKSEQUENCEVERIFY = 178,
    OP_NOP4 = 179,
    OP_NOP5 = 180,
    OP_NOP6 = 181,
    OP_NOP7 = 182,
    OP_NOP8 = 183,
    OP_NOP9 = 184,
    OP_NOP10 = 185
}
