"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-expression-statement no-magic-numbers no-object-mutation
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
const hex_1 = require("../../utils/hex");
const bitcoin_cash_opcodes_1 = require("./bitcoin-cash/bitcoin-cash-opcodes");
const instruction_sets_1 = require("./instruction-sets");
ava_1.default('Each Opcodes enum contains a single instruction for 0-255', t => {
    const expected = lib_1.range(256);
    const names = (keys) => keys.filter(k => isNaN(parseInt(k, 10)));
    const numbers = (keys) => keys.map(k => parseInt(k, 10)).filter(k => !isNaN(k));
    const bch = Object.keys(bitcoin_cash_opcodes_1.BitcoinCashOpcodes);
    t.deepEqual(numbers(bch), expected);
    t.deepEqual(names(bch).length, expected.length);
    const btc = Object.keys(instruction_sets_1.BitcoinOpcodes);
    t.deepEqual(numbers(btc), expected);
    t.deepEqual(names(btc).length, expected.length);
});
const defToFixtures = (tests) => Object.entries(tests).map(entry => {
    const hex = entry[0].split('0x')[1];
    const script = hex_1.hexToBin(hex);
    const asm = entry[1].asm;
    // tslint:disable-next-line:cyclomatic-complexity
    const object = entry[1].parse.map(set => (Object.assign({ opcode: set[0] }, (set.length > 2 ? { malformed: true } : undefined), (set[1] !== undefined ? { data: hex_1.hexToBin(set[1]) } : undefined), (set[2] !== undefined ? { expectedDataBytes: set[2] } : undefined), (set[3] !== undefined ? { length: hex_1.hexToBin(set[3]) } : undefined), (set[4] !== undefined ? { expectedLengthBytes: set[4] } : undefined))));
    return { hex, script, asm, object };
});
const wellFormedScripts = {
    '0x00': {
        asm: 'OP_0',
        parse: [[0, '']]
    },
    '0x0001010202020303030376': {
        asm: 'OP_0 OP_PUSHBYTES_1 0x01 OP_PUSHBYTES_2 0x0202 OP_PUSHBYTES_3 0x030303 OP_DUP',
        parse: [[0, ''], [1, '01'], [2, '0202'], [3, '030303'], [118]]
    },
    '0x410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac': {
        asm: 'OP_PUSHBYTES_65 0x0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3 OP_CHECKSIG',
        parse: [
            [
                0x41,
                '0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3'
            ],
            [0xac]
        ]
    },
    '0x4c020304': {
        asm: 'OP_PUSHDATA_1 2 0x0304',
        parse: [[0x4c, '0304']]
    },
    '0x76a91411b366edfc0a8b66feebae5c2e25a7b6a5d1cf3188ac': {
        asm: 'OP_DUP OP_HASH160 OP_PUSHBYTES_20 0x11b366edfc0a8b66feebae5c2e25a7b6a5d1cf31 OP_EQUALVERIFY OP_CHECKSIG',
        parse: [
            [0x76],
            [0xa9],
            [0x14, '11b366edfc0a8b66feebae5c2e25a7b6a5d1cf31'],
            [0x88],
            [0xac]
        ]
    }
};
const malFormedPushes = {
    '0x01': {
        asm: 'OP_PUSHBYTES_1 [missing 1 byte]',
        parse: [[0x01, '', 1]]
    },
    '0x0201': {
        asm: 'OP_PUSHBYTES_2 0x01[missing 1 byte]',
        parse: [[0x02, '01', 2]]
    },
    '0x4b': {
        asm: 'OP_PUSHBYTES_75 [missing 75 bytes]',
        parse: [[0x4b, '', 75]]
    },
    '0x4c': {
        asm: 'OP_PUSHDATA_1 [missing 1 byte]',
        parse: [[0x4c, undefined, undefined, '', 1]]
    },
    '0x4c02': {
        asm: 'OP_PUSHDATA_1 2 [missing 2 bytes]',
        parse: [[0x4c, '', 2]]
    },
    '0x4d': {
        asm: 'OP_PUSHDATA_2 [missing 2 bytes]',
        parse: [[0x4d, undefined, undefined, '', 2]]
    },
    '0x4d01': {
        asm: 'OP_PUSHDATA_2 0x01[missing 1 byte]',
        parse: [[0x4d, undefined, undefined, '01', 2]]
    },
    '0x4d0101': {
        asm: 'OP_PUSHDATA_2 257 [missing 257 bytes]',
        parse: [[0x4d, '', 257]]
    },
    '0x4d010101': {
        asm: 'OP_PUSHDATA_2 257 0x01[missing 256 bytes]',
        parse: [[0x4d, '01', 257]]
    },
    '0x4e': {
        asm: 'OP_PUSHDATA_4 [missing 4 bytes]',
        parse: [[0x4e, undefined, undefined, '', 4]]
    },
    '0x4e01': {
        asm: 'OP_PUSHDATA_4 0x01[missing 3 bytes]',
        parse: [[0x4e, undefined, undefined, '01', 4]]
    },
    '0x4e01000001': {
        asm: 'OP_PUSHDATA_4 16777217 [missing 16777217 bytes]',
        parse: [[0x4e, '', 16777217]]
    },
    '0x4e0100000101': {
        asm: 'OP_PUSHDATA_4 16777217 0x01[missing 16777216 bytes]',
        parse: [[0x4e, '01', 16777217]]
    }
};
const parse = (t, input, expected) => {
    t.deepEqual(instruction_sets_1.parseScript(input), expected);
};
parse.title = title => `parse script: ${title}`.trim();
const disassemble = (t, input, expected) => {
    t.deepEqual(instruction_sets_1.disassembleParsedAuthenticationInstructions(bitcoin_cash_opcodes_1.BitcoinCashOpcodes, input), expected);
};
disassemble.title = title => `disassemble script: ${title}`.trim();
const serialize = (t, input, expected) => {
    t.deepEqual(instruction_sets_1.serializeAuthenticationInstructions(input), expected);
};
serialize.title = title => `serialize script: ${title}`.trim();
const reSerialize = (t, input, expected) => {
    t.deepEqual(instruction_sets_1.serializeParsedAuthenticationInstructions(input), expected);
};
reSerialize.title = title => `re-serialize parsed script: ${title}`.trim();
// tslint:disable-next-line:no-unused-expression
defToFixtures(wellFormedScripts).map(({ asm, hex, script, object }) => {
    ava_1.default(`0x${hex}`, parse, script, object);
    ava_1.default(`0x${hex}`, disassemble, object, asm);
    ava_1.default(`0x${hex}`, serialize, object, script);
    ava_1.default(`0x${hex}`, reSerialize, object, script);
});
// tslint:disable-next-line:no-unused-expression
defToFixtures(malFormedPushes).map(({ asm, hex, script, object }) => {
    ava_1.default(`0x${hex}`, parse, script, object);
    ava_1.default(`0x${hex}`, disassemble, object, asm);
    ava_1.default(`0x${hex}`, reSerialize, object, script);
});
//# sourceMappingURL=data:application/json;base64,