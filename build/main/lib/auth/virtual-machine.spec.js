"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-expression-statement no-magic-numbers readonly-array
const ava_1 = __importDefault(require("ava"));
const virtual_machine_1 = require("./virtual-machine");
var simpleOps;
(function (simpleOps) {
    simpleOps[simpleOps["OP_0"] = 0] = "OP_0";
    simpleOps[simpleOps["OP_INCREMENT"] = 1] = "OP_INCREMENT";
    simpleOps[simpleOps["OP_DECREMENT"] = 2] = "OP_DECREMENT";
    simpleOps[simpleOps["OP_ADD"] = 3] = "OP_ADD";
})(simpleOps || (simpleOps = {}));
var SimpleError;
(function (SimpleError) {
    SimpleError["UNDEFINED"] = "The program called an undefined opcode.";
    SimpleError["EMPTY_STACK"] = "The program tried to pop from an empty stack.";
})(SimpleError || (SimpleError = {}));
const simpleInstructionSet = {
    clone: (state) => (Object.assign({}, (state.error !== undefined ? { error: state.error } : {}), { instructions: state.instructions.slice(), ip: state.ip, stack: state.stack.slice() })),
    continue: (state) => state.error === undefined && state.ip < state.instructions.length,
    operations: {
        [simpleOps.OP_0]: (state) => {
            state.stack.push(0);
            return state;
        },
        [simpleOps.OP_INCREMENT]: (state) => {
            const top = state.stack.pop();
            top === undefined
                ? // tslint:disable-next-line:no-object-mutation
                    (state.error = SimpleError.EMPTY_STACK)
                : state.stack.push(top + 1);
            return state;
        },
        [simpleOps.OP_DECREMENT]: (state) => {
            const top = state.stack.pop();
            top === undefined
                ? // tslint:disable-next-line:no-object-mutation
                    (state.error = SimpleError.EMPTY_STACK)
                : state.stack.push(top - 1);
            return state;
        },
        [simpleOps.OP_ADD]: (state) => {
            const a = state.stack.pop();
            const b = state.stack.pop();
            a === undefined || b === undefined
                ? // tslint:disable-next-line:no-object-mutation
                    (state.error = SimpleError.EMPTY_STACK)
                : state.stack.push(a + b);
            return state;
        }
    },
    undefined: (state) => {
        // tslint:disable-next-line:no-object-mutation
        state.error = SimpleError.UNDEFINED;
        return state;
    }
};
// tslint:enable: no-object-mutation
const vm = virtual_machine_1.createAuthenticationVirtualMachine(simpleInstructionSet);
const instructions = [
    { opcode: simpleOps.OP_0 },
    { opcode: simpleOps.OP_INCREMENT },
    { opcode: simpleOps.OP_INCREMENT },
    { opcode: simpleOps.OP_0 },
    { opcode: simpleOps.OP_DECREMENT },
    { opcode: simpleOps.OP_ADD }
];
ava_1.default('vm.debug with a simple instruction set', t => {
    t.deepEqual(vm.debug({ instructions, ip: 0, stack: [] }), [
        { instructions, ip: 1, stack: [0] },
        { instructions, ip: 2, stack: [1] },
        { instructions, ip: 3, stack: [2] },
        { instructions, ip: 4, stack: [2, 0] },
        { instructions, ip: 5, stack: [2, -1] },
        { instructions, ip: 6, stack: [1] }
    ]);
});
ava_1.default('vm.evaluate does not mutate the original state', t => {
    const unchanged = { instructions, ip: 0, stack: [] };
    t.deepEqual(vm.evaluate(unchanged), { instructions, ip: 6, stack: [1] });
    t.deepEqual(unchanged, { instructions, ip: 0, stack: [] });
});
ava_1.default('vm.step does not mutate the original state', t => {
    const unchanged = { instructions, ip: 5, stack: [2, -1] };
    t.deepEqual(vm.step(unchanged), { instructions, ip: 6, stack: [1] });
    t.deepEqual(unchanged, { instructions, ip: 5, stack: [2, -1] });
});
ava_1.default('vm.stepMutate does not clone (mutating the original state)', t => {
    const changed = { instructions, ip: 5, stack: [2, -1] };
    t.deepEqual(vm.stepMutate(changed), { instructions, ip: 6, stack: [1] });
    t.deepEqual(changed, { instructions, ip: 6, stack: [1] });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1tYWNoaW5lLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvdmlydHVhbC1tYWNoaW5lLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5RUFBeUU7QUFDekUsOENBQXVCO0FBSXZCLHVEQUcyQjtBQUUzQixJQUFLLFNBS0o7QUFMRCxXQUFLLFNBQVM7SUFDWix5Q0FBUSxDQUFBO0lBQ1IseURBQWdCLENBQUE7SUFDaEIseURBQWdCLENBQUE7SUFDaEIsNkNBQVUsQ0FBQTtBQUNaLENBQUMsRUFMSSxTQUFTLEtBQVQsU0FBUyxRQUtiO0FBRUQsSUFBSyxXQUdKO0FBSEQsV0FBSyxXQUFXO0lBQ2Qsb0VBQXFELENBQUE7SUFDckQsNEVBQTZELENBQUE7QUFDL0QsQ0FBQyxFQUhJLFdBQVcsS0FBWCxXQUFXLFFBR2Y7QUFTRCxNQUFNLG9CQUFvQixHQUEwQztJQUNsRSxLQUFLLEVBQUUsQ0FBQyxLQUE0QixFQUFFLEVBQUUsQ0FBQyxtQkFDcEMsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDNUQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQ3hDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUNaLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUMxQjtJQUNGLFFBQVEsRUFBRSxDQUFDLEtBQTRCLEVBQUUsRUFBRSxDQUN6QyxLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTTtJQUNuRSxVQUFVLEVBQUU7UUFDVixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxD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QUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBRUgsYUFBSSxDQUFDLDREQUE0RCxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDLENBQUMifQ==